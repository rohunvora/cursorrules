# Architecture & Design Philosophy

## Design Philosophy: Primitives Over Templates

When designing LLM-powered systems, prefer primitives and emergence over templates and rigid structures:

---
description: Architectural principles for LLM-powered features emphasizing context over constraints
globs: "**/*.py, **/*.ts, **/*.tsx"
alwaysApply: false
---
### Trust LLM Intelligence
* **DON'T** create template responses or predetermined patterns
* **DO** provide raw data and let the LLM interpret contextually
* **DON'T** build complex state machines or rule engines
* **DO** pass context and let intelligence emerge naturally

### Examples of This Philosophy:

#### ❌ Template Thinking:
```python
if price_change > 50:
    alert = "FOMO_WARNING"
elif time_since_loss < 300:
    alert = "REVENGE_TRADE"
```

#### ✅ Primitives Thinking:
```python
context = {
    'price_change': price_change,
    'time_since_loss': time_since_loss,
    'user_history': recent_trades
}
# Let GPT decide what's significant
```

### Key Principles:
1. **Data > Templates**: Provide rich context, not categories
2. **Principles > Rules**: Give guiding principles, not if/else logic
3. **Natural > Structured**: Let conversation flow naturally
4. **Flexible > Fixed**: Store data flexibly (JSON) not rigid schemas
5. **Emergence > Prescription**: Let patterns emerge from usage

### When Building LLM-Powered Features:
* Ask: "What raw data helps GPT understand?"
* Don't ask: "What categories/templates do we need?"
* Trust the LLM with ambiguity
* Use LLM strengths (context), not weaknesses (rigid rules)

**Remember**: LLMs excel at nuance and context. Don't constrain them with traditional programming limits.

### Real-World Applications

#### Example 1: User Notifications
❌ **Template Approach**:
```python
NOTIFICATION_TEMPLATES = {
    'payment_success': "Payment of ${amount} successful",
    'payment_failed': "Payment failed: {reason}"
}
```

✅ **Context Approach**:
```python
notification_context = {
    'event_type': 'payment',
    'status': 'success',
    'amount': 150.00,
    'user_history': user.recent_transactions,
    'time_of_day': datetime.now(),
    'user_preferences': user.notification_settings
}
# Let LLM craft appropriate message with full context
```

#### Example 2: Error Handling
❌ **Fixed Categories**:
```python
ERROR_TYPES = ['network', 'validation', 'permission', 'unknown']
```

✅ **Rich Context**:
```python
error_context = {
    'error': str(e),
    'stack_trace': traceback.format_exc(),
    'user_action': current_action,
    'system_state': get_system_state(),
    'recent_events': event_log[-10:]
}
```