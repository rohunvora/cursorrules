# Architecture & Design Philosophy

## Design Philosophy: Primitives Over Templates

When designing systems that leverage LLM intelligence (like GPT-4), prefer primitives and emergence over templates and rigid structures:

### Trust LLM Intelligence
* **DON'T** create template responses or predetermined patterns
* **DO** provide raw data and let the LLM interpret contextually
* **DON'T** build complex state machines or rule engines
* **DO** pass context and let intelligence emerge naturally

### Examples of This Philosophy:

#### ❌ Template Thinking:
```python
if price_change > 50:
    alert = "FOMO_WARNING"
elif time_since_loss < 300:
    alert = "REVENGE_TRADE"
```

#### ✅ Primitives Thinking:
```python
context = {
    'price_change': price_change,
    'time_since_loss': time_since_loss,
    'user_history': recent_trades
}
# Let GPT decide what's significant
```

### Key Principles:
1. **Data > Templates**: Provide rich context, not predetermined categories
2. **Principles > Rules**: Give the LLM guiding principles, not if/else logic
3. **Natural > Structured**: Let conversation flow naturally without rigid state
4. **Flexible > Fixed**: Store data flexibly (JSON) rather than rigid schemas
5. **Emergence > Prescription**: Let patterns emerge from usage, don't prescribe them

### When Building LLM-Powered Features:
* Start by asking: "What raw data would help GPT understand this?"
* Avoid asking: "What categories/templates do we need?"
* Trust the LLM to handle ambiguity better than your code
* Use the LLM's strength (understanding context) not weakness (following rigid rules)

Remember: LLMs excel at understanding nuance and context. Don't constrain them with the limitations of traditional programming paradigms.