# File Naming
* `snake_case.py` - Python files
* `kebab-case.mdx` - MDX/Markdown files
* `PascalCase.tsx` - React/TypeScript components
* `camelCase.js` - JavaScript files

---
description: Automated cleanup and maintenance rules for project organization
alwaysApply: false
---
## Cleanup Triggers

### Daily
- [ ] Archive completed scratchpad sections
- [ ] Clear terminal outputs over 1000 lines
- [ ] Update task progress in Status Board

### Weekly  
- [ ] Archive old scratchpad to `.cursor/archives/`
- [ ] Review and consolidate lessons.mdc
- [ ] Clean up unused imports
- [ ] Remove commented code blocks

### On PR/Merge
- [ ] Run linters and formatters
- [ ] Update documentation
- [ ] Clean up feature branches
- [ ] Archive feature-specific notes

# Logging
* Use level tags: `[INFO]`, `[WARN]`, `[ERROR]`
* Include correlation IDs for related operations
* Format: `[LEVEL] YYYY-MM-DD HH:MM:SS | Component | Message | {context}`
* Always log:
  - Major operation start/end
  - Errors with full context
  - State changes and decisions

# Branch & Commit Hygiene
* Delete merged branches within 24 hours
* Branch naming: `<type>/<description>-<issue-number>`
  - Types: `feature/`, `fix/`, `chore/`, `docs/`
* Commit messages:
  - Format: `<type>(<scope>): <subject>`
  - Subject: imperative mood, â‰¤72 chars
  - Examples:
    - `feat(auth): add OAuth2 integration`
    - `fix(api): handle null response in user endpoint`
    - `chore(rules): bootstrap modular .mdc rule set`

# Code Quality
* Run linters before commits
* Fix linter errors at root cause
* No commented-out code in commits
* Remove debug prints before committing

# Documentation
* Update docs with code changes
* Keep README current
* Document non-obvious decisions